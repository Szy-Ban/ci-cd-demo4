name: CI/CD Pipeline

on:
  push:
    branches:
      - '**'
  workflow_dispatch:

jobs:
  # 🧪 Etap A1: Testy jednostkowe (tylko nie-main)
  test:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Instalacja zależności
        run: npm install
      - name: Uruchom testy
        run: npm test

  # 🔍 Etap A2: Linting (tylko nie-main)
  lint:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Instalacja zależności
        run: npm install
      - name: Uruchom lint
        run: npm run lint

  # 🐳 Etap B: Budowanie obrazu i udostępnienie artefaktu
  build:
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v3
      - name: Instalacja zależności
        run: npm install
      - name: Buduj obraz Docker
        run: docker build -t myapp:${{ github.sha }} .
      - name: Zapisz obraz jako artefakt
        run: docker save myapp:${{ github.sha }} -o image.tar
      - name: Upload artefaktu
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar

  # 🚧 Etap C: Deploy na Staging z ręczną akceptacją
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: staging
    steps:
      - uses: actions/checkout@v3
      - name: Pobierz artefakt
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - name: Wypakuj obraz
        run: docker load -i image.tar
      - name: Symulacja deployu na STAGING
        run: echo "Deployuję na STAGING..."

  # 🚀 Etap D: Deploy na Produkcję po akceptacji stagingu
  deploy-prod:
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - uses: actions/checkout@v3
      - name: Pobierz artefakt
        uses: actions/download-artifact@v3
        with:
          name: docker-image
          path: .
      - name: Wypakuj obraz
        run: docker load -i image.tar
      - name: Push do Docker Hub
        run: |
          docker tag myapp:${{ github.sha }} szyban/myapp:latest
          docker push szyban/myapp:latest

  # 📄 Etap E: Raport końcowy – Uruchamiamy report-generator.js
  report:
    runs-on: windows-latest
    needs: [test, lint, build, deploy-staging, deploy-prod]
    if: always()
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Instalacja zależności
        run: npm install

      - name: Generuj raport
        env:
          JOB_TEST:    ${{ needs.test.result }}
          JOB_LINT:    ${{ needs.lint.result }}
          JOB_BUILD:   ${{ needs.build.result }}
          JOB_STAGING: ${{ needs.deploy-staging.result }}
          JOB_PROD:    ${{ needs.deploy-prod.result }}
          GITHUB_REF:  ${{ github.ref }}
        run: node report-generator.js

      - name: Upload raportu
        uses: actions/upload-artifact@v4
        with:
          name: report
          path: report.txt
